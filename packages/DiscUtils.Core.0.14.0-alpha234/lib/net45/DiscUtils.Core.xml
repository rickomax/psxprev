<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiscUtils.Core</name>
    </assembly>
    <members>
        <member name="T:DiscUtils.ApplePartitionMap.PartitionMap">
            <summary>
            Interprets Apple Partition Map structures that partition a disk.
            </summary>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the PartitionMap class.
            </summary>
            <param name="stream">Stream containing the contents of a disk.</param>
        </member>
        <member name="P:DiscUtils.ApplePartitionMap.PartitionMap.DiskGuid">
            <summary>
            Gets the GUID of the disk, always returns Guid.Empty.
            </summary>
        </member>
        <member name="P:DiscUtils.ApplePartitionMap.PartitionMap.Partitions">
            <summary>
            Gets the partitions present on the disk.
            </summary>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the new partition.</returns>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in byte).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in byte).</param>
            <returns>The index of the new partition.</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is achieved by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.ApplePartitionMap.PartitionMap.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition.</param>
        </member>
        <member name="T:DiscUtils.Archives.TarFile">
            <summary>
            Minimal tar file format implementation.
            </summary>
        </member>
        <member name="M:DiscUtils.Archives.TarFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the TarFile class.
            </summary>
            <param name="fileStream">The Tar file.</param>
        </member>
        <member name="M:DiscUtils.Archives.TarFile.TryOpenFile(System.String,System.IO.Stream@)">
            <summary>
            Tries to open a file contained in the archive, if it exists.
            </summary>
            <param name="path">The path to the file within the archive.</param>
            <param name="stream">A stream containing the file contents, or null.</param>
            <returns><c>true</c> if the file could be opened, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Archives.TarFile.OpenFile(System.String)">
            <summary>
            Open a file contained in the archive.
            </summary>
            <param name="path">The path to the file within the archive.</param>
            <returns>A stream containing the file contents.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file is not found.</exception>
        </member>
        <member name="M:DiscUtils.Archives.TarFile.FileExists(System.String)">
            <summary>
            Determines if a given file exists in the archive.
            </summary>
            <param name="path">The file path to test.</param>
            <returns><c>true</c> if the file is present, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Archives.TarFile.DirExists(System.String)">
            <summary>
            Determines if a given directory exists in the archive.
            </summary>
            <param name="path">The file path to test.</param>
            <returns><c>true</c> if the directory is present, else <c>false</c>.</returns>
        </member>
        <member name="T:DiscUtils.Archives.TarFileBuilder">
            <summary>
            Builder to create UNIX Tar archive files.
            </summary>
        </member>
        <member name="M:DiscUtils.Archives.TarFileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DiscUtils.Archives.TarFileBuilder"/> class.
            </summary>
        </member>
        <member name="M:DiscUtils.Archives.TarFileBuilder.AddFile(System.String,System.Byte[])">
            <summary>
            Add a file to the tar archive.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="buffer">The file data.</param>
        </member>
        <member name="M:DiscUtils.Archives.TarFileBuilder.AddFile(System.String,System.Byte[],DiscUtils.UnixFilePermissions,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Add a file to the tar archive.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="buffer">The file data.</param>
            <param name="fileMode">The access mode of the file.</param>
            <param name="ownerId">The uid of the owner.</param>
            <param name="groupId">The gid of the owner.</param>
            <param name="modificationTime">The modification time for the file.</param>
        </member>
        <member name="M:DiscUtils.Archives.TarFileBuilder.AddFile(System.String,System.IO.Stream)">
            <summary>
            Add a file to the tar archive.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="stream">The file data.</param>
        </member>
        <member name="M:DiscUtils.Archives.TarFileBuilder.AddFile(System.String,System.IO.Stream,DiscUtils.UnixFilePermissions,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Add a file to the tar archive.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="stream">The file data.</param>
            <param name="fileMode">The access mode of the file.</param>
            <param name="ownerId">The uid of the owner.</param>
            <param name="groupId">The gid of the owner.</param>
            <param name="modificationTime">The modification time for the file.</param>
        </member>
        <member name="T:DiscUtils.ChsAddress">
            <summary>
            Class whose instances represent a CHS (Cylinder, Head, Sector) address on a disk.
            </summary>
            <remarks>Instances of this class are immutable.</remarks>
        </member>
        <member name="F:DiscUtils.ChsAddress.First">
            <summary>
            The address of the first sector on any disk.
            </summary>
        </member>
        <member name="M:DiscUtils.ChsAddress.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ChsAddress class.
            </summary>
            <param name="cylinder">The number of cylinders of the disk.</param>
            <param name="head">The number of heads (aka platters) of the disk.</param>
            <param name="sector">The number of sectors per track/cylinder of the disk.</param>
        </member>
        <member name="P:DiscUtils.ChsAddress.Cylinder">
            <summary>
            Gets the cylinder number (zero-based).
            </summary>
        </member>
        <member name="P:DiscUtils.ChsAddress.Head">
            <summary>
            Gets the head (zero-based).
            </summary>
        </member>
        <member name="P:DiscUtils.ChsAddress.Sector">
            <summary>
            Gets the sector number (one-based).
            </summary>
        </member>
        <member name="M:DiscUtils.ChsAddress.Equals(System.Object)">
            <summary>
            Determines if this object is equivalent to another.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is equivalent, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.ChsAddress.GetHashCode">
            <summary>
            Calculates the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DiscUtils.ChsAddress.ToString">
            <summary>
            Gets a string representation of this object, in the form (C/H/S).
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:DiscUtils.ClusterMap">
            <summary>
            Class that identifies the role of each cluster in a file system.
            </summary>
        </member>
        <member name="M:DiscUtils.ClusterMap.GetRole(System.Int64)">
            <summary>
            Gets the role of a cluster within the file system.
            </summary>
            <param name="cluster">The cluster to inspect.</param>
            <returns>The clusters role (or roles).</returns>
        </member>
        <member name="M:DiscUtils.ClusterMap.ClusterToPaths(System.Int64)">
            <summary>
            Converts a cluster to a list of file names.
            </summary>
            <param name="cluster">The cluster to inspect.</param>
            <returns>A list of paths that map to the cluster.</returns>
            <remarks>A list is returned because on file systems with the notion of
            hard links, a cluster may correspond to multiple directory entries.</remarks>
        </member>
        <member name="T:DiscUtils.ClusterRoles">
            <summary>
            Enumeration of possible cluster roles.
            </summary>
            <remarks>A cluster may be in more than one role.</remarks>
        </member>
        <member name="F:DiscUtils.ClusterRoles.None">
            <summary>
            Unknown, or unspecified role.
            </summary>
        </member>
        <member name="F:DiscUtils.ClusterRoles.Free">
            <summary>
            Cluster is free.
            </summary>
        </member>
        <member name="F:DiscUtils.ClusterRoles.DataFile">
            <summary>
            Cluster is in use by a normal file.
            </summary>
        </member>
        <member name="F:DiscUtils.ClusterRoles.SystemFile">
            <summary>
            Cluster is in use by a system file.
            </summary>
            <remarks>This isn't a file marked with the 'system' attribute,
            rather files that form part of the file system namespace but also
            form part of the file system meta-data.</remarks>
        </member>
        <member name="F:DiscUtils.ClusterRoles.Metadata">
            <summary>
            Cluster is in use for meta-data.
            </summary>
        </member>
        <member name="F:DiscUtils.ClusterRoles.BootArea">
            <summary>
            Cluster contains the boot region.
            </summary>
        </member>
        <member name="F:DiscUtils.ClusterRoles.Bad">
            <summary>
            Cluster is marked bad.
            </summary>
        </member>
        <member name="T:DiscUtils.Compression.Adler32">
            <summary>
            Implementation of the Adler-32 checksum algorithm.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.Adler32.#ctor">
            <summary>
            Initializes a new instance of the Adler32 class.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.Adler32.Value">
            <summary>
            Gets the checksum of all data processed so far.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.Adler32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Provides data that should be checksummed.
            </summary>
            <param name="buffer">Buffer containing the data to checksum.</param>
            <param name="offset">Offset of the first byte to checksum.</param>
            <param name="count">The number of bytes to checksum.</param>
            <remarks>
            Call this method repeatedly until all checksummed
            data has been processed.
            </remarks>
        </member>
        <member name="T:DiscUtils.Compression.BigEndianBitStream">
            <summary>
            Converts a byte stream into a bit stream.
            </summary>
        </member>
        <member name="T:DiscUtils.Compression.BitStream">
            <summary>
            Base class for bit streams.
            </summary>
            <remarks>
            The rules for conversion of a byte stream to a bit stream vary
            between implementations.
            </remarks>
        </member>
        <member name="P:DiscUtils.Compression.BitStream.MaxReadAhead">
            <summary>
            Gets the maximum number of bits that can be peeked on the stream.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.BitStream.Read(System.Int32)">
            <summary>
            Reads bits from the stream.
            </summary>
            <param name="count">The number of bits to read.</param>
            <returns>The bits as a UInt32.</returns>
        </member>
        <member name="M:DiscUtils.Compression.BitStream.Peek(System.Int32)">
            <summary>
            Queries data from the stream.
            </summary>
            <param name="count">The number of bits to query.</param>
            <returns>The bits as a UInt32.</returns>
            <remarks>This method does not consume the bits (i.e. move the file pointer).</remarks>
        </member>
        <member name="M:DiscUtils.Compression.BitStream.Consume(System.Int32)">
            <summary>
            Consumes bits from the stream without returning them.
            </summary>
            <param name="count">The number of bits to consume.</param>
        </member>
        <member name="T:DiscUtils.Compression.BlockCompressor">
            <summary>
            Base class for block compression algorithms.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.BlockCompressor.BlockSize">
            <summary>
            Gets or sets the block size parameter to the algorithm.
            </summary>
            <remarks>
            Some algorithms may use this to control both compression and decompression, others may
            only use it to control compression.  Some may ignore it entirely.
            </remarks>
        </member>
        <member name="M:DiscUtils.Compression.BlockCompressor.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Compresses some data.
            </summary>
            <param name="source">The uncompressed input.</param>
            <param name="sourceOffset">Offset of the input data in <c>source</c>.</param>
            <param name="sourceLength">The amount of uncompressed data.</param>
            <param name="compressed">The destination for the output compressed data.</param>
            <param name="compressedOffset">Offset for the output data in <c>compressed</c>.</param>
            <param name="compressedLength">The maximum size of the compressed data on input, and the actual size on output.</param>
            <returns>Indication of success, or indication the data could not compress into the requested space.</returns>
        </member>
        <member name="M:DiscUtils.Compression.BlockCompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decompresses some data.
            </summary>
            <param name="source">The compressed input.</param>
            <param name="sourceOffset">Offset of the input data in <c>source</c>.</param>
            <param name="sourceLength">The amount of compressed data.</param>
            <param name="decompressed">The destination for the output decompressed data.</param>
            <param name="decompressedOffset">Offset for the output data in <c>decompressed</c>.</param>
            <returns>The amount of decompressed data.</returns>
        </member>
        <member name="T:DiscUtils.Compression.BZip2CombinedHuffmanTrees">
            <summary>
            Represents scheme used by BZip2 where multiple Huffman trees are used as a
            virtual Huffman tree, with a logical selector every 50 bits in the bit stream.
            </summary>
        </member>
        <member name="T:DiscUtils.Compression.BZip2DecoderStream">
            <summary>
            Implementation of a BZip2 decoder.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership)">
            <summary>
            Initializes a new instance of the BZip2DecoderStream class.
            </summary>
            <param name="stream">The compressed input stream.</param>
            <param name="ownsStream">Whether ownership of stream passes to the new instance.</param>
        </member>
        <member name="P:DiscUtils.Compression.BZip2DecoderStream.CanRead">
            <summary>
            Gets an indication of whether read access is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.BZip2DecoderStream.CanSeek">
            <summary>
            Gets an indication of whether seeking is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.BZip2DecoderStream.CanWrite">
            <summary>
            Gets an indication of whether write access is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.BZip2DecoderStream.Length">
            <summary>
            Gets the length of the stream (the capacity of the underlying buffer).
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.BZip2DecoderStream.Position">
            <summary>
            Gets and sets the current position within the stream.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.Flush">
            <summary>
            Flushes all data to the underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the stream.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="offset">The start offset within the destination buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Changes the current stream position.
            </summary>
            <param name="offset">The origin-relative stream position.</param>
            <param name="origin">The origin for the stream position.</param>
            <returns>The new stream position.</returns>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream (the underlying buffer's capacity).
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The starting offset within buffer.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:DiscUtils.Compression.BZip2DecoderStream.Dispose(System.Boolean)">
            <summary>
            Releases underlying resources.
            </summary>
            <param name="disposing">Whether this method is called from Dispose.</param>
        </member>
        <member name="T:DiscUtils.Compression.CompressionResult">
            <summary>
            Possible results of attempting to compress data.
            </summary>
            <remarks>
            A compression routine <i>may</i> return <c>Compressed</c>, even if the data
            was 'all zeros' or increased in size.  The <c>AllZeros</c> and <c>Incompressible</c>
            values are for algorithms that include special detection for these cases.
            </remarks>
        </member>
        <member name="F:DiscUtils.Compression.CompressionResult.Compressed">
            <summary>
            The data compressed succesfully.
            </summary>
        </member>
        <member name="F:DiscUtils.Compression.CompressionResult.AllZeros">
            <summary>
            The data was all-zero's.
            </summary>
        </member>
        <member name="F:DiscUtils.Compression.CompressionResult.Incompressible">
            <summary>
            The data was incompressible (could not fit into destination buffer).
            </summary>
        </member>
        <member name="T:DiscUtils.Compression.HuffmanTree">
            <summary>
            A canonical Huffman tree implementation.
            </summary>
            <remarks>
            A lookup table is created that will take any bit sequence (max tree depth in length),
            indicating the output symbol.  In WIM files, in practice, no chunk exceeds 32768 bytes
            in length, so we often end up generating a bigger lookup table than the data it's
            encoding. This makes for exceptionally fast symbol lookups O(1), but is inefficient
            overall.
            </remarks>
        </member>
        <member name="T:DiscUtils.Compression.ZlibStream">
            <summary>
            Implementation of the Zlib compression algorithm.
            </summary>
            <remarks>Only decompression is currently implemented.</remarks>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the ZlibStream class.
            </summary>
            <param name="stream">The stream to compress of decompress.</param>
            <param name="mode">Whether to compress or decompress.</param>
            <param name="leaveOpen">Whether closing this stream should leave <c>stream</c> open.</param>
        </member>
        <member name="P:DiscUtils.Compression.ZlibStream.CanRead">
            <summary>
            Gets whether the stream can be read.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.ZlibStream.CanSeek">
            <summary>
            Gets whether the stream pointer can be changed.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.ZlibStream.CanWrite">
            <summary>
            Gets whether the stream can be written to.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.ZlibStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
        </member>
        <member name="P:DiscUtils.Compression.ZlibStream.Position">
            <summary>
            Gets and sets the stream position.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to populate.</param>
            <param name="offset">The first byte to write.</param>
            <param name="count">The number of bytes requested.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to a new position.
            </summary>
            <param name="offset">Relative position to seek to.</param>
            <param name="origin">The origin of the seek.</param>
            <returns>The new position.</returns>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.SetLength(System.Int64)">
            <summary>
            Changes the length of the stream.
            </summary>
            <param name="value">The new desired length of the stream.</param>
        </member>
        <member name="M:DiscUtils.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">Buffer containing the data to write.</param>
            <param name="offset">Offset of the first byte to write.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="T:DiscUtils.DiscDirectoryInfo">
            <summary>
            Provides information about a directory on a disc.
            </summary>
            <remarks>
            This class allows navigation of the disc directory/file hierarchy.
            </remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.#ctor(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Initializes a new instance of the DiscDirectoryInfo class.
            </summary>
            <param name="fileSystem">The file system the directory info relates to.</param>
            <param name="path">The path within the file system of the directory.</param>
        </member>
        <member name="P:DiscUtils.DiscDirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscDirectoryInfo.FullName">
            <summary>
            Gets the full path of the directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Delete">
            <summary>
            Deletes a directory, even if it's not empty.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes a directory, with the caller choosing whether to recurse.
            </summary>
            <param name="recursive"><c>true</c> to delete all child node, <c>false</c> to fail if the directory is not empty.</param>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a directory and it's contents to a new path.
            </summary>
            <param name="destinationDirName">The destination directory name.</param>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories">
            <summary>
            Gets all child directories.
            </summary>
            <returns>An array of child directories.</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Gets all child directories matching a search pattern.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>An array of child directories, or empty if none match.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Gets all descendant directories matching a search pattern.
            </summary>
            <param name="pattern">The search pattern.</param>
            <param name="searchOption">Whether to search just this directory, or all children.</param>
            <returns>An array of descendant directories, or empty if none match.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).  The option parameter determines whether only immediate
            children, or all children are returned.</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles">
            <summary>
            Gets all files.
            </summary>
            <returns>An array of files.</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles(System.String)">
            <summary>
            Gets all files matching a search pattern.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>An array of files, or empty if none match.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Gets all descendant files matching a search pattern.
            </summary>
            <param name="pattern">The search pattern.</param>
            <param name="searchOption">Whether to search just this directory, or all children.</param>
            <returns>An array of descendant files, or empty if none match.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).  The option parameter determines whether only immediate
            children, or all children are returned.</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFileSystemInfos">
            <summary>
            Gets all files and directories in this directory.
            </summary>
            <returns>An array of files and directories.</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Gets all files and directories in this directory.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>An array of files and directories.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="T:DiscUtils.DiscFileInfo">
            <summary>
            Provides information about a file on a disc.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Exists">
            <summary>
            Gets a value indicating whether the file exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the file is read-only.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Length">
            <summary>
            Gets the length of the current file in bytes.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Delete">
            <summary>
            Deletes a file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this <see cref="T:DiscUtils.DiscFileInfo"/>.
            </summary>
            <returns>The newly created writer.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="destinationFileName">The destination file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="destinationFileName">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Create">
            <summary>
            Creates a new file for reading and writing.
            </summary>
            <returns>The newly created stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CreateText">
            <summary>
            Creates a new <see cref="T:System.IO.StreamWriter"/> that writes a new text file.
            </summary>
            <returns>A new stream writer that can write to the file contents.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.MoveTo(System.String)">
            <summary>
            Moves a file to a new location.
            </summary>
            <param name="destinationFileName">The new name of the file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens the current file.
            </summary>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The newly created stream.</returns>
            <remarks>Read-only file systems only support <c>FileMode.Open</c>.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the current file.
            </summary>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The newly created stream.</returns>
            <remarks>Read-only file systems only support <c>FileMode.Open</c> and <c>FileAccess.Read</c>.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenRead">
            <summary>
            Opens an existing file for read-only access.
            </summary>
            <returns>The newly created stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenText">
            <summary>
            Opens an existing file for reading as UTF-8 text.
            </summary>
            <returns>The newly created reader.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenWrite">
            <summary>
            Opens a file for writing.
            </summary>
            <returns>The newly created stream.</returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystem">
            <summary>
            Provides the base class for all file systems.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.#ctor">
            <summary>
            Initializes a new instance of the DiscFileSystem class.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the DiscFileSystem class.
            </summary>
            <param name="defaultOptions">The options instance to use for this file system instance.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Finalize">
            <summary>
            Finalizes an instance of the DiscFileSystem class.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.Options">
            <summary>
            Gets the file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.FriendlyName">
            <summary>
            Gets a friendly description of the file system type.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.CanWrite">
            <summary>
            Gets a value indicating whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file or directory exists.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The representing object.</returns>
            <remarks>The file does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path.</param>
            <returns>The representing object.</returns>
            <remarks>The directory does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path.</param>
            <returns>The representing object.</returns>
            <remarks>The file system object does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.ReadBootCode">
            <summary>
            Reads the boot code of the file system into a byte array.
            </summary>
            <returns>The boot code, or <c>null</c> if not available.</returns>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.Size">
            <summary>
            Size of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.UsedSpace">
            <summary>
            Used space of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.AvailableSpace">
            <summary>
            Available space of the Filesystem in bytes
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Dispose">
            <summary>
            Disposes of this instance, releasing all resources.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Dispose(System.Boolean)">
            <summary>
            Disposes of this instance.
            </summary>
            <param name="disposing">The value <c>true</c> if Disposing.</param>
        </member>
        <member name="T:DiscUtils.DiscFileSystemChecker">
            <summary>
            Base class for objects that validate file system integrity.
            </summary>
            <remarks>Instances of this class do not offer the ability to fix/correct
            file system issues, just to perform a limited number of checks on
            integrity of the file system.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystemChecker.Check(System.IO.TextWriter,DiscUtils.ReportLevels)">
            <summary>
            Checks the integrity of a file system held in a stream.
            </summary>
            <param name="reportOutput">A report on issues found.</param>
            <param name="levels">The amount of detail to report.</param>
            <returns><c>true</c> if the file system appears valid, else <c>false</c>.</returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystemInfo">
            <summary>
            Provides the base class for both <see cref="T:DiscUtils.DiscFileInfo"/> and <see cref="T:DiscUtils.DiscDirectoryInfo"/> objects.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time (in local time) of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time (in UTC) of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file system object exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Extension">
            <summary>
            Gets the extension part of the file or directory name.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.FileSystem">
            <summary>
            Gets the file system the referenced file or directory exists on.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.FullName">
            <summary>
            Gets the full path of the file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the last time (in local time) the file or directory was accessed.
            </summary>
            <remarks>Read-only file systems will never update this value, it will remain at a fixed value.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the last time (in UTC) the file or directory was accessed.
            </summary>
            <remarks>Read-only file systems will never update this value, it will remain at a fixed value.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the last time (in local time) the file or directory was written to.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the last time (in UTC) the file or directory was written to.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Parent">
            <summary>
            Gets the <see cref="T:DiscUtils.DiscDirectoryInfo"/> of the directory containing the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Path">
            <summary>
            Gets the path to the referenced file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.Equals(System.Object)">
            <summary>
            Indicates if <paramref name="obj"/> is equivalent to this object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equivalent, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystemOptions">
            <summary>
            Common file system options.
            </summary>
            <remarks>Not all options are honoured by all file systems.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemOptions.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator the file system should use.
            </summary>
            <remarks>This option is normally <c>null</c>, which is fine for most purposes.
            Use this option when you need to finely control the filesystem for
            reproducibility of behaviour (for example in a test harness).</remarks>
        </member>
        <member name="T:DiscUtils.DiskImageBuilder">
            <summary>
            Base class for all disk image builders.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.BiosGeometry">
            <summary>
            Gets or sets the geometry of this disk, as reported by the BIOS, will be implied from the content stream if not set.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.Content">
            <summary>
            Gets or sets the content for this disk, implying the size of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.GenericAdapterType">
            <summary>
            Gets or sets the adapter type for created virtual disk, for file formats that encode this information.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.Geometry">
            <summary>
            Gets or sets the geometry of this disk, will be implied from the content stream if not set.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.PreservesBiosGeometry">
            <summary>
            Gets a value indicating whether this file format preserves BIOS geometry information.
            </summary>
        </member>
        <member name="M:DiscUtils.DiskImageBuilder.GetBuilder(System.String,System.String)">
            <summary>
            Gets an instance that constructs the specified type (and variant) of virtual disk image.
            </summary>
            <param name="type">The type of image to build (VHD, VMDK, etc).</param>
            <param name="variant">The variant type (differencing/dynamic, fixed/static, etc).</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:DiscUtils.DiskImageBuilder.Build(System.String)">
            <summary>
            Initiates the construction of the disk image.
            </summary>
            <param name="baseName">The base name for the disk images.</param>
            <returns>A set of one or more logical files that constitute the
            disk image.  The first file is the 'primary' file that is normally attached to VMs.</returns>
            <remarks>The supplied <c>baseName</c> is the start of the file name, with no file
            extension.  The set of file specifications will indicate the actual name corresponding
            to each logical file that comprises the disk image.  For example, given a base name
            'foo', the files 'foo.vmdk' and 'foo-flat.vmdk' could be returned.</remarks>
        </member>
        <member name="T:DiscUtils.DiskImageFileSpecification">
            <summary>
            Describes a particular file that is a constituent part of a virtual disk.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageFileSpecification.Name">
            <summary>
            Gets name of the file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiskImageFileSpecification.OpenStream">
            <summary>
            Gets the object that provides access to the file's content.
            </summary>
            <returns>A stream object that contains the file's content.</returns>
        </member>
        <member name="T:DiscUtils.FileSystemInfo">
            <summary>
            Base class holding information about a file system.
            </summary>
            <remarks>
            File system implementations derive from this class, to provide information about the file system.
            </remarks>
        </member>
        <member name="P:DiscUtils.FileSystemInfo.Description">
            <summary>
            Gets a one-line description of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.FileSystemInfo.Name">
            <summary>
            Gets the name of the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(DiscUtils.VolumeInfo)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(System.IO.Stream)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(DiscUtils.VolumeInfo,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access.</param>
            <param name="parameters">Parameters for the file system.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(System.IO.Stream,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access.</param>
            <param name="parameters">Parameters for the file system.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.ToString">
            <summary>
            Gets the name of the file system.
            </summary>
            <returns>The file system name.</returns>
        </member>
        <member name="T:DiscUtils.FileSystemManager">
            <summary>
            FileSystemManager determines which file systems are present on a volume.
            </summary>
            <remarks>
            The static detection methods detect default file systems.  To plug in additional
            file systems, create an instance of this class and call RegisterFileSystems.
            </remarks>
        </member>
        <member name="M:DiscUtils.FileSystemManager.#cctor">
            <summary>
            Initializes a new instance of the FileSystemManager class.
            </summary>
        </member>
        <member name="M:DiscUtils.FileSystemManager.RegisterFileSystems(DiscUtils.Vfs.VfsFileSystemFactory)">
            <summary>
            Registers new file systems with an instance of this class.
            </summary>
            <param name="factory">The detector for the new file systems.</param>
        </member>
        <member name="M:DiscUtils.FileSystemManager.RegisterFileSystems(System.Reflection.Assembly)">
            <summary>
            Registers new file systems detected in an assembly.
            </summary>
            <param name="assembly">The assembly to inspect.</param>
            <remarks>
            To be detected, the <c>VfsFileSystemFactory</c> instances must be marked with the
            <c>VfsFileSystemFactoryAttribute</c>> attribute.
            </remarks>
        </member>
        <member name="M:DiscUtils.FileSystemManager.DetectFileSystems(DiscUtils.VolumeInfo)">
            <summary>
            Detect which file systems are present on a volume.
            </summary>
            <param name="volume">The volume to inspect.</param>
            <returns>The list of file systems detected.</returns>
        </member>
        <member name="M:DiscUtils.FileSystemManager.DetectFileSystems(System.IO.Stream)">
            <summary>
            Detect which file systems are present in a stream.
            </summary>
            <param name="stream">The stream to inspect.</param>
            <returns>The list of file systems detected.</returns>
        </member>
        <member name="T:DiscUtils.FileSystemParameters">
            <summary>
            Class with generic file system parameters.
            </summary>
            <remarks>Note - not all parameters apply to all types of file system.</remarks>
        </member>
        <member name="P:DiscUtils.FileSystemParameters.FileNameEncoding">
            <summary>
            Gets or sets the character encoding for file names, or <c>null</c> for default.
            </summary>
            <remarks>Some file systems, such as FAT, don't specify a particular character set for
            file names.  This parameter determines the character set that will be used for such
            file systems.</remarks>
        </member>
        <member name="P:DiscUtils.FileSystemParameters.TimeConverter">
            <summary>
            Gets or sets the algorithm to convert file system time to UTC.
            </summary>
            <remarks>Some file system, such as FAT, don't have a defined way to convert from file system
            time (local time where the file system is authored) to UTC time.  This parameter determines
            the algorithm to use.</remarks>
        </member>
        <member name="T:DiscUtils.FloppyDiskType">
            <summary>
            The supported Floppy Disk logical formats.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.DoubleDensity">
            <summary>
            720KiB capacity disk.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.HighDensity">
            <summary>
            1440KiB capacity disk.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.Extended">
            <summary>
            2880KiB capacity disk.
            </summary>
        </member>
        <member name="T:DiscUtils.GenericDiskAdapterType">
            <summary>
            Well known hard disk adaptor types.
            </summary>
        </member>
        <member name="F:DiscUtils.GenericDiskAdapterType.Ide">
            <summary>
            IDE adaptor.
            </summary>
        </member>
        <member name="F:DiscUtils.GenericDiskAdapterType.Scsi">
            <summary>
            SCSI adaptor.
            </summary>
        </member>
        <member name="T:DiscUtils.Geometry">
            <summary>
            Class whose instances represent disk geometries.
            </summary>
            <remarks>Instances of this class are immutable.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.  The default 512 bytes per sector is assumed.
            </summary>
            <param name="cylinders">The number of cylinders of the disk.</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk.</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk.</param>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.
            </summary>
            <param name="cylinders">The number of cylinders of the disk.</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk.</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk.</param>
            <param name="bytesPerSector">The number of bytes per sector of the disk.</param>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.
            </summary>
            <param name="capacity">The total capacity of the disk.</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk.</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk.</param>
            <param name="bytesPerSector">The number of bytes per sector of the disk.</param>
        </member>
        <member name="P:DiscUtils.Geometry.BytesPerSector">
            <summary>
            Gets the number of bytes in each sector.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.Capacity">
            <summary>
            Gets the total capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.Cylinders">
            <summary>
            Gets the number of cylinders.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.HeadsPerCylinder">
            <summary>
            Gets the number of heads (aka platters).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsBiosAndIdeSafe">
            <summary>
            Gets a value indicating whether the Geometry is representable both by the BIOS and by IDE.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsBiosSafe">
            <summary>
            Gets a value indicating whether the Geometry is consistent with the values a BIOS can support.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsIdeSafe">
            <summary>
            Gets a value indicating whether the Geometry is consistent with the values IDE can represent.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.LastSector">
            <summary>
            Gets the address of the last sector on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.Null">
            <summary>
            Gets a null geometry, which has 512-byte sectors but zero sectors, tracks or cylinders.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.SectorsPerTrack">
            <summary>
            Gets the number of sectors per track.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.TotalSectors">
            <summary>
            Gets the total size of the disk (in sectors).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.TotalSectorsLong">
            <summary>
            Gets the total size of the disk (in sectors).
            </summary>
        </member>
        <member name="M:DiscUtils.Geometry.LargeBiosGeometry(DiscUtils.Geometry)">
            <summary>
            Gets the 'Large' BIOS geometry for a disk, given it's physical geometry.
            </summary>
            <param name="ideGeometry">The physical (aka IDE) geometry of the disk.</param>
            <returns>The geometry a BIOS using the 'Large' method for calculating disk geometry will indicate for the disk.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.LbaAssistedBiosGeometry(System.Int64)">
            <summary>
            Gets the 'LBA Assisted' BIOS geometry for a disk, given it's capacity.
            </summary>
            <param name="capacity">The capacity of the disk.</param>
            <returns>The geometry a BIOS using the 'LBA Assisted' method for calculating disk geometry will indicate for the disk.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.MakeBiosSafe(DiscUtils.Geometry,System.Int64)">
            <summary>
            Converts a geometry into one that is BIOS-safe, if not already.
            </summary>
            <param name="geometry">The geometry to make BIOS-safe.</param>
            <param name="capacity">The capacity of the disk.</param>
            <returns>The new geometry.</returns>
            <remarks>This method returns the LBA-Assisted geometry if the given geometry isn't BIOS-safe.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.FromCapacity(System.Int64)">
            <summary>
            Calculates a sensible disk geometry for a disk capacity using the VHD algorithm (errs under).
            </summary>
            <param name="capacity">The desired capacity of the disk.</param>
            <returns>The appropriate disk geometry.</returns>
            <remarks>The geometry returned tends to produce a disk with less capacity
            than requested (an exact capacity is not always possible).  The geometry returned is the IDE
            (aka Physical) geometry of the disk, not necessarily the geometry used by the BIOS.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.FromCapacity(System.Int64,System.Int32)">
            <summary>
            Calculates a sensible disk geometry for a disk capacity using the VHD algorithm (errs under).
            </summary>
            <param name="capacity">The desired capacity of the disk.</param>
            <param name="sectorSize">The logical sector size of the disk.</param>
            <returns>The appropriate disk geometry.</returns>
            <remarks>The geometry returned tends to produce a disk with less capacity
            than requested (an exact capacity is not always possible).  The geometry returned is the IDE
            (aka Physical) geometry of the disk, not necessarily the geometry used by the BIOS.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.ToLogicalBlockAddress(DiscUtils.ChsAddress)">
            <summary>
            Converts a CHS (Cylinder,Head,Sector) address to a LBA (Logical Block Address).
            </summary>
            <param name="chsAddress">The CHS address to convert.</param>
            <returns>The Logical Block Address (in sectors).</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToLogicalBlockAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a CHS (Cylinder,Head,Sector) address to a LBA (Logical Block Address).
            </summary>
            <param name="cylinder">The cylinder of the address.</param>
            <param name="head">The head of the address.</param>
            <param name="sector">The sector of the address.</param>
            <returns>The Logical Block Address (in sectors).</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToChsAddress(System.Int64)">
            <summary>
            Converts a LBA (Logical Block Address) to a CHS (Cylinder, Head, Sector) address.
            </summary>
            <param name="logicalBlockAddress">The logical block address (in sectors).</param>
            <returns>The address in CHS form.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.TranslateToBios(DiscUtils.GeometryTranslation)">
            <summary>
            Translates an IDE (aka Physical) geometry to a BIOS (aka Logical) geometry.
            </summary>
            <param name="translation">The translation to perform.</param>
            <returns>The translated disk geometry.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.TranslateToBios(System.Int64,DiscUtils.GeometryTranslation)">
            <summary>
            Translates an IDE (aka Physical) geometry to a BIOS (aka Logical) geometry.
            </summary>
            <param name="capacity">The capacity of the disk, required if the geometry is an approximation on the actual disk size.</param>
            <param name="translation">The translation to perform.</param>
            <returns>The translated disk geometry.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.Equals(System.Object)">
            <summary>
            Determines if this object is equivalent to another.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is equivalent, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.GetHashCode">
            <summary>
            Calculates the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToString">
            <summary>
            Gets a string representation of this object, in the form (C/H/S).
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:DiscUtils.GeometryCalculation">
            <summary>
            Delegate for calculating a disk geometry from a capacity.
            </summary>
            <param name="capacity">The disk capacity to convert.</param>
            <returns>The appropriate geometry for the disk.</returns>
        </member>
        <member name="T:DiscUtils.GeometryTranslation">
            <summary>
            Enumeration of standard BIOS disk geometry translation methods.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.None">
            <summary>
            Apply no translation.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Auto">
            <summary>
            Automatic, based on the physical geometry select the most appropriate translation.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Lba">
            <summary>
            LBA assisted translation, based on just the disk capacity.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Large">
            <summary>
            Bit-shifting translation, based on the physical geometry of the disk.
            </summary>
        </member>
        <member name="T:DiscUtils.IClusterBasedFileSystem">
            <summary>
            Base class for all file systems based on a cluster model.
            </summary>
        </member>
        <member name="P:DiscUtils.IClusterBasedFileSystem.ClusterSize">
            <summary>
            Gets the size (in bytes) of each cluster.
            </summary>
        </member>
        <member name="P:DiscUtils.IClusterBasedFileSystem.TotalClusters">
            <summary>
            Gets the total number of clusters managed by the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.IClusterBasedFileSystem.ClusterToOffset(System.Int64)">
            <summary>
            Converts a cluster (index) into an absolute byte position in the underlying stream.
            </summary>
            <param name="cluster">The cluster to convert.</param>
            <returns>The corresponding absolute byte position.</returns>
        </member>
        <member name="M:DiscUtils.IClusterBasedFileSystem.OffsetToCluster(System.Int64)">
            <summary>
            Converts an absolute byte position in the underlying stream to a cluster (index).
            </summary>
            <param name="offset">The byte position to convert.</param>
            <returns>The cluster containing the specified byte.</returns>
        </member>
        <member name="M:DiscUtils.IClusterBasedFileSystem.PathToClusters(System.String)">
            <summary>
            Converts a file name to the list of clusters occupied by the file's data.
            </summary>
            <param name="path">The path to inspect.</param>
            <returns>The clusters.</returns>
            <remarks>Note that in some file systems, small files may not have dedicated
            clusters.  Only dedicated clusters will be returned.</remarks>
        </member>
        <member name="M:DiscUtils.IClusterBasedFileSystem.PathToExtents(System.String)">
            <summary>
            Converts a file name to the extents containing its data.
            </summary>
            <param name="path">The path to inspect.</param>
            <returns>The file extents, as absolute byte positions in the underlying stream.</returns>
            <remarks>Use this method with caution - not all file systems will store all bytes
            directly in extents.  Files may be compressed, sparse or encrypted.  This method
            merely indicates where file data is stored, not what's stored.</remarks>
        </member>
        <member name="M:DiscUtils.IClusterBasedFileSystem.BuildClusterMap">
            <summary>
            Gets an object that can convert between clusters and files.
            </summary>
            <returns>The cluster map.</returns>
        </member>
        <member name="T:DiscUtils.IDiagnosticTraceable">
            <summary>
            Interface exposed by objects that can provide a structured trace of their content.
            </summary>
        </member>
        <member name="M:DiscUtils.IDiagnosticTraceable.Dump(System.IO.TextWriter,System.String)">
            <summary>
            Writes a diagnostic report about the state of the object to a writer.
            </summary>
            <param name="writer">The writer to send the report to.</param>
            <param name="linePrefix">The prefix to place at the start of each line.</param>
        </member>
        <member name="T:DiscUtils.IFileSystem">
            <summary>
            Common interface for all file systems.
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.CanWrite">
            <summary>
            Gets a value indicating whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.IFileSystem.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.IFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file or directory exists.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The representing object.</returns>
            <remarks>The file does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path.</param>
            <returns>The representing object.</returns>
            <remarks>The directory does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path.</param>
            <returns>The representing object.</returns>
            <remarks>The file system object does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.ReadBootCode">
            <summary>
            Reads the boot code of the file system into a byte array.
            </summary>
            <returns>The boot code, or <c>null</c> if not available.</returns>
        </member>
        <member name="P:DiscUtils.IFileSystem.Size">
            <summary>
            Size of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.UsedSpace">
            <summary>
            Used space of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.AvailableSpace">
            <summary>
            Available space of the Filesystem in bytes
            </summary>
        </member>
        <member name="F:DiscUtils.Internal.Crc32Algorithm.Common">
            <summary>
            Used in Ethernet, PKZIP, BZIP2, Gzip, PNG, etc. (aka CRC32).
            </summary>
        </member>
        <member name="F:DiscUtils.Internal.Crc32Algorithm.Castagnoli">
            <summary>
            Used in iSCSI, SCTP, Btrfs, Vhdx. (aka CRC32C).
            </summary>
        </member>
        <member name="F:DiscUtils.Internal.Crc32Algorithm.Koopman">
            <summary>
            Unknown usage. (aka CRC32K).
            </summary>
        </member>
        <member name="F:DiscUtils.Internal.Crc32Algorithm.Aeronautical">
            <summary>
            Used in AIXM.  (aka CRC32Q).
            </summary>
        </member>
        <member name="T:DiscUtils.Internal.Crc32BigEndian">
            <summary>
            Calculates CRC32 of buffers.
            </summary>
        </member>
        <member name="T:DiscUtils.Internal.Crc32LittleEndian">
            <summary>
            Calculates CRC32 of buffers.
            </summary>
        </member>
        <member name="T:DiscUtils.Internal.ObjectCache`2">
            <summary>
            Caches objects.
            </summary>
            <typeparam name="K">The type of the object key.</typeparam>
            <typeparam name="V">The type of the objects to cache.</typeparam>
            <remarks>
            Can be use for two purposes - to ensure there is only one instance of a given object,
            and to prevent the need to recreate objects that are expensive to create.
            </remarks>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.Map``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            Converts between two arrays.
            </summary>
            <typeparam name="T">The type of the elements of the source array.</typeparam>
            <typeparam name="U">The type of the elements of the destination array.</typeparam>
            <param name="source">The source array.</param>
            <param name="func">The function to map from source type to destination type.</param>
            <returns>The resultant array.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts between two arrays.
            </summary>
            <typeparam name="T">The type of the elements of the source array.</typeparam>
            <typeparam name="U">The type of the elements of the destination array.</typeparam>
            <param name="source">The source array.</param>
            <param name="func">The function to map from source type to destination type.</param>
            <returns>The resultant array.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.Filter``2(System.Collections.Generic.ICollection{``1},System.Func{``1,System.Boolean})">
            <summary>
            Filters a collection into a new collection.
            </summary>
            <typeparam name="C">The type of the new collection.</typeparam>
            <typeparam name="T">The type of the collection entries.</typeparam>
            <param name="source">The collection to filter.</param>
            <param name="predicate">The predicate to select which entries are carried over.</param>
            <returns>The new collection, containing all entries where the predicate returns <c>true</c>.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.RangesOverlap``1(``0,``0,``0,``0)">
            <summary>
            Indicates if two ranges overlap.
            </summary>
            <typeparam name="T">The type of the ordinals.</typeparam>
            <param name="xFirst">The lowest ordinal of the first range (inclusive).</param>
            <param name="xLast">The highest ordinal of the first range (exclusive).</param>
            <param name="yFirst">The lowest ordinal of the second range (inclusive).</param>
            <param name="yLast">The highest ordinal of the second range (exclusive).</param>
            <returns><c>true</c> if the ranges overlap, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.GetDirectoryFromPath(System.String)">
            <summary>
            Extracts the directory part of a path.
            </summary>
            <param name="path">The path to process.</param>
            <returns>The directory part.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.GetFileFromPath(System.String)">
            <summary>
            Extracts the file part of a path.
            </summary>
            <param name="path">The path to process.</param>
            <returns>The file part of the path.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.CombinePaths(System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="a">The first part of the path.</param>
            <param name="b">The second part of the path.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.ResolveRelativePath(System.String,System.String)">
            <summary>
            Resolves a relative path into an absolute one.
            </summary>
            <param name="basePath">The base path to resolve from.</param>
            <param name="relativePath">The relative path.</param>
            <returns>The absolute path. If no <paramref name="basePath"/> is specified
            then relativePath is returned as-is. If <paramref name="relativePath"/>
            contains more '..' characters than the base path contains levels of 
            directory, the resultant string be the root drive followed by the file name.
            If no the basePath starts with '\' (no drive specified) then the returned
            path will also start with '\'.
            For example: (\TEMP\Foo.txt, ..\..\Bar.txt) gives (\Bar.txt).
            </returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.Is8Dot3(System.String)">
            <summary>
            Indicates if a file name matches the 8.3 pattern.
            </summary>
            <param name="name">The name to test.</param>
            <returns><c>true</c> if the name is 8.3, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Internal.Utilities.ConvertWildcardsToRegEx(System.String)">
            <summary>
            Converts a 'standard' wildcard file/path specification into a regular expression.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>The resultant regular expression.</returns>
            <remarks>
            The wildcard * (star) matches zero or more characters (including '.'), and ?
            (question mark) matches precisely one character (except '.').
            </remarks>
        </member>
        <member name="T:DiscUtils.InvalidFileSystemException">
            <summary>
            Exception thrown when some invalid file system data is found, indicating probably corruption.
            </summary>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:DiscUtils.IUnixFileSystem">
            <summary>
            Provides the base class for all file systems that support Unix semantics.
            </summary>
        </member>
        <member name="M:DiscUtils.IUnixFileSystem.GetUnixFileInfo(System.String)">
            <summary>
            Retrieves Unix-specific information about a file or directory.
            </summary>
            <param name="path">Path to the file or directory.</param>
            <returns>Information about the owner, group, permissions and type of the
            file or directory.</returns>
        </member>
        <member name="T:DiscUtils.IWindowsFileSystem">
            <summary>
            Provides the base class for all file systems that support Windows semantics.
            </summary>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetSecurity(System.String)">
            <summary>
            Gets the security descriptor associated with the file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The security descriptor.</returns>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.SetSecurity(System.String,System.Security.AccessControl.RawSecurityDescriptor)">
            <summary>
            Sets the security descriptor associated with the file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="securityDescriptor">The new security descriptor.</param>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetReparsePoint(System.String)">
            <summary>
            Gets the reparse point data associated with a file or directory.
            </summary>
            <param name="path">The file to query.</param>
            <returns>The reparse point information.</returns>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.SetReparsePoint(System.String,DiscUtils.ReparsePoint)">
            <summary>
            Sets the reparse point data on a file or directory.
            </summary>
            <param name="path">The file to set the reparse point on.</param>
            <param name="reparsePoint">The new reparse point.</param>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.RemoveReparsePoint(System.String)">
            <summary>
            Removes a reparse point from a file or directory, without deleting the file or directory.
            </summary>
            <param name="path">The path to the file or directory to remove the reparse point from.</param>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetShortName(System.String)">
            <summary>
            Gets the short name for a given path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The short name.</returns>
            <remarks>
            This method only gets the short name for the final part of the path, to
            convert a complete path, call this method repeatedly, once for each path
            segment.  If there is no short name for the given path,<c>null</c> is
            returned.
            </remarks>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.SetShortName(System.String,System.String)">
            <summary>
            Sets the short name for a given file or directory.
            </summary>
            <param name="path">The full path to the file or directory to change.</param>
            <param name="shortName">The shortName, which should not include a path.</param>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetFileStandardInformation(System.String)">
            <summary>
            Gets the standard file information for a file.
            </summary>
            <param name="path">The full path to the file or directory to query.</param>
            <returns>The standard file information.</returns>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.SetFileStandardInformation(System.String,DiscUtils.WindowsFileInformation)">
            <summary>
            Sets the standard file information for a file.
            </summary>
            <param name="path">The full path to the file or directory to query.</param>
            <param name="info">The standard file information.</param>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetAlternateDataStreams(System.String)">
            <summary>
            Gets the names of the alternate data streams for a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            The list of alternate data streams (or empty, if none).  To access the contents
            of the alternate streams, use OpenFile(path + ":" + name, ...).
            </returns>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.GetFileId(System.String)">
            <summary>
            Gets the file id for a given path.
            </summary>
            <param name="path">The path to get the id of.</param>
            <returns>The file id, or -1.</returns>
            <remarks>
            The returned file id uniquely identifies the file, and is shared by all hard
            links to the same file.  The value -1 indicates no unique identifier is
            available, and so it can be assumed the file has no hard links.
            </remarks>
        </member>
        <member name="M:DiscUtils.IWindowsFileSystem.HasHardLinks(System.String)">
            <summary>
            Indicates whether the file is known by other names.
            </summary>
            <param name="path">The file to inspect.</param>
            <returns><c>true</c> if the file has other names, else <c>false</c>.</returns>
        </member>
        <member name="T:DiscUtils.LogicalDiskManager.DynamicDiskManager">
            <summary>
            A class that understands Windows LDM structures, mapping physical volumes to logical volumes.
            </summary>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.#ctor(DiscUtils.VirtualDisk[])">
            <summary>
            Initializes a new instance of the DynamicDiskManager class.
            </summary>
            <param name="disks">The initial set of disks to manage.</param>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.Dump(System.IO.TextWriter,System.String)">
            <summary>
            Writes a diagnostic report about the state of the disk manager.
            </summary>
            <param name="writer">The writer to send the report to.</param>
            <param name="linePrefix">The prefix to place at the start of each line.</param>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.HandlesPhysicalVolume(DiscUtils.PhysicalVolumeInfo)">
            <summary>
            Determines if a physical volume contains LDM data.
            </summary>
            <param name="volumeInfo">The volume to inspect.</param>
            <returns><c>true</c> if the physical volume contains LDM data, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.IsDynamicDisk(DiscUtils.VirtualDisk)">
            <summary>
            Determines if a disk is 'dynamic' (i.e. contains LDM volumes).
            </summary>
            <param name="disk">The disk to inspect.</param>
            <returns><c>true</c> if the disk contains LDM volumes, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.Add(DiscUtils.VirtualDisk)">
            <summary>
            Adds a new disk to be managed.
            </summary>
            <param name="disk">The disk to manage.</param>
        </member>
        <member name="M:DiscUtils.LogicalDiskManager.DynamicDiskManager.GetLogicalVolumes">
            <summary>
            Gets the logical volumes held across the set of managed disks.
            </summary>
            <returns>An array of logical volumes.</returns>
        </member>
        <member name="T:DiscUtils.LogicalVolumeInfo">
            <summary>
            Information about a logical disk volume, which may be backed by one or more physical volumes.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Identity">
            <summary>
            The stable identity for this logical volume.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Length">
            <summary>
            Gets the length of the volume (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be Geometry.Null).
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Status">
            <summary>
            Gets the status of the logical volume, indicating volume health.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.PhysicalVolume">
            <summary>
            Gets the underlying physical volume info
            </summary>
        </member>
        <member name="M:DiscUtils.LogicalVolumeInfo.Open">
            <summary>
            Opens a stream with access to the content of the logical volume.
            </summary>
            <returns>The volume's content as a stream.</returns>
        </member>
        <member name="T:DiscUtils.LogicalVolumeStatus">
            <summary>
            Enumeration of the health status of a logical volume.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.Healthy">
            <summary>
            The volume is healthy and fully functional.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.FailedRedundancy">
            <summary>
            The volume is completely accessible, but at degraded redundancy.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.Failed">
            <summary>
            The volume is wholey, or partly, inaccessible.
            </summary>
        </member>
        <member name="T:DiscUtils.NativeFileSystem">
            <summary>
            Provides an implementation for OS-mounted file systems.
            </summary>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the NativeFileSystem class.
            </summary>
            <param name="basePath">The 'root' directory of the new instance.</param>
            <param name="readOnly">Only permit 'read' activities.</param>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.BasePath">
            <summary>
            Gets the base path used to create the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.FriendlyName">
            <summary>
            Provides a friendly description of the file system type.
            </summary>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
            <remarks>The Native File System is thread safe.</remarks>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file or directory exists.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The representing object.</returns>
            <remarks>The file does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path.</param>
            <returns>The representing object.</returns>
            <remarks>The directory does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.NativeFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path.</param>
            <returns>The representing object.</returns>
            <remarks>The file system object does not need to exist.</remarks>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.Size">
            <summary>
            Size of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.UsedSpace">
            <summary>
            Used space of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.NativeFileSystem.AvailableSpace">
            <summary>
            Available space of the Filesystem in bytes
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosExtendedPartitionTable.GetMetadataDiskExtents">
            <summary>
            Gets all of the disk ranges containing partition table data.
            </summary>
            <returns>Set of stream extents, indicated as byte offset from the start of the disk.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionedDiskBuilder">
            <summary>
            Builds a stream with the contents of a BIOS partitioned disk.
            </summary>
            <remarks>
            This class assembles a disk image dynamically in memory.  The
            constructed stream will read data from the partition content
            streams only when a client of this class tries to read from
            that partition.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionedDiskBuilder.#ctor(System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the BiosPartitionedDiskBuilder class.
            </summary>
            <param name="capacity">The capacity of the disk (in bytes).</param>
            <param name="biosGeometry">The BIOS geometry of the disk.</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionedDiskBuilder.#ctor(System.Int64,System.Byte[],DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the BiosPartitionedDiskBuilder class.
            </summary>
            <param name="capacity">The capacity of the disk (in bytes).</param>
            <param name="bootSectors">The boot sector(s) of the disk.</param>
            <param name="biosGeometry">The BIOS geometry of the disk.</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionedDiskBuilder.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the BiosPartitionedDiskBuilder class by
            cloning the partition structure of a source disk.
            </summary>
            <param name="sourceDisk">The disk to clone.</param>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionedDiskBuilder.PartitionTable">
            <summary>
            Gets the partition table in the disk.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionedDiskBuilder.SetPartitionContent(System.Int32,DiscUtils.Streams.SparseStream)">
            <summary>
            Sets a stream representing the content of a partition in the partition table.
            </summary>
            <param name="index">The index of the partition.</param>
            <param name="stream">The stream with the contents of the partition.</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionedDiskBuilder.UpdateBiosGeometry(DiscUtils.Geometry)">
            <summary>
            Updates the CHS fields in partition records to reflect a new BIOS geometry.
            </summary>
            <param name="geometry">The disk's new BIOS geometry.</param>
            <remarks>The partitions are not relocated to a cylinder boundary, just the CHS fields are updated on the
            assumption the LBA fields are definitive.</remarks>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionInfo">
            <summary>
            Provides access to partition records in a BIOS (MBR) partition table.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.BiosType">
            <summary>
            Gets the type of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.End">
            <summary>
            Gets the end (inclusive) of the partition as a CHS address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.GuidType">
            <summary>
            Always returns <see cref="T:System.Guid"/>.Empty.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.IsActive">
            <summary>
            Gets a value indicating whether this partition is active (bootable).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.IsPrimary">
            <summary>
            Gets a value indicating whether the partition is a primary (rather than extended) partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.PrimaryIndex">
            <summary>
            Gets the index of the partition in the primary partition table, or <c>-1</c> if not a primary partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.Start">
            <summary>
            Gets the start of the partition as a CHS address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.TypeAsString">
            <summary>
            Gets the type of the partition as a string.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionInfo.Open">
            <summary>
            Opens a stream to access the content of the partition.
            </summary>
            <returns>The new stream.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionTable">
            <summary>
            Represents a BIOS (MBR) Partition Table.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the BiosPartitionTable class.
            </summary>
            <param name="disk">The disk containing the partition table.</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.#ctor(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the BiosPartitionTable class.
            </summary>
            <param name="disk">The stream containing the disk data.</param>
            <param name="diskGeometry">The geometry of the disk.</param>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.BiosUserPartitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.DiskGuid">
            <summary>
            Gets the GUID that uniquely identifies this disk, if supported (else returns <c>null</c>).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.Partitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.DetectGeometry(System.IO.Stream)">
            <summary>
            Makes a best guess at the geometry of a disk.
            </summary>
            <param name="disk">String containing the disk image to detect the geometry from.</param>
            <returns>The detected geometry.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.IsValid(System.IO.Stream)">
            <summary>
            Indicates if a stream contains a valid partition table.
            </summary>
            <param name="disk">The stream to inspect.</param>
            <returns><c>true</c> if the partition table is valid, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(DiscUtils.VirtualDisk)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(DiscUtils.VirtualDisk,DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Creates a new partition table on a disk containing a single partition.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <param name="type">The partition type for the single partition.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The stream containing the disk data.</param>
            <param name="diskGeometry">The geometry of the disk.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new primary partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the new partition.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in bytes).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in bytes).</param>
            <returns>The index of the new partition.</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is achieved by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition.</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreatePrimaryByCylinder(System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Creates a new Primary Partition that occupies whole cylinders, for best compatibility.
            </summary>
            <param name="first">The first cylinder to include in the partition (inclusive).</param>
            <param name="last">The last cylinder to include in the partition (inclusive).</param>
            <param name="type">The BIOS (MBR) type of the new partition.</param>
            <param name="markActive">Whether to mark the partition active (bootable).</param>
            <returns>The index of the new partition.</returns>
            <remarks>If the cylinder 0 is given, the first track will not be used, to reserve space
            for the meta-data at the start of the disk.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreatePrimaryBySector(System.Int64,System.Int64,System.Byte,System.Boolean)">
            <summary>
            Creates a new Primary Partition, specified by Logical Block Addresses.
            </summary>
            <param name="first">The LBA address of the first sector (inclusive).</param>
            <param name="last">The LBA address of the last sector (inclusive).</param>
            <param name="type">The BIOS (MBR) type of the new partition.</param>
            <param name="markActive">Whether to mark the partition active (bootable).</param>
            <returns>The index of the new partition.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.SetActivePartition(System.Int32)">
            <summary>
            Sets the active partition.
            </summary>
            <param name="index">The index of the primary partition to mark bootable, or <c>-1</c> for none.</param>
            <remarks>The supplied index is the index within the primary partition, see <c>PrimaryIndex</c> on <c>BiosPartitionInfo</c>.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.GetMetadataDiskExtents">
            <summary>
            Gets all of the disk ranges containing partition table metadata.
            </summary>
            <returns>Set of stream extents, indicated as byte offset from the start of the disk.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.UpdateBiosGeometry(DiscUtils.Geometry)">
            <summary>
            Updates the CHS fields in partition records to reflect a new BIOS geometry.
            </summary>
            <param name="geometry">The disk's new BIOS geometry.</param>
            <remarks>The partitions are not relocated to a cylinder boundary, just the CHS fields are updated on the
            assumption the LBA fields are definitive.</remarks>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionTypes">
            <summary>
            Convenient access to well-known BIOS (MBR) Partition Types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat12">
            <summary>
            Microsoft FAT12 (fewer than 32,680 sectors in the volume).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16Small">
            <summary>
            Microsoft FAT16 (32,680–65,535 sectors or 16 MB–33 MB).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Extended">
            <summary>
            Extended Partition (contains other partitions).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16">
            <summary>
            Microsoft BIGDOS FAT16 (33 MB–4 GB).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Ntfs">
            <summary>
            Installable File System (NTFS).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat32">
            <summary>
            Microsoft FAT32.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat32Lba">
            <summary>
            Microsoft FAT32, accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16Lba">
            <summary>
            Microsoft BIGDOS FAT16, accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.ExtendedLba">
            <summary>
            Extended Partition (contains other partitions), accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.WindowsDynamicVolume">
            <summary>
            Windows Logical Disk Manager dynamic volume.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxSwap">
            <summary>
            Linux Swap.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxNative">
            <summary>
            Linux Native (ext2 and friends).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxLvm">
            <summary>
            Linux Logical Volume Manager (LVM).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.GptProtective">
            <summary>
            GUID Partition Table (GPT) protective partition, fills entire disk.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.EfiSystem">
            <summary>
            EFI System partition on an MBR disk.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTypes.ToString(System.Byte)">
            <summary>
            Provides a string representation of some known BIOS partition types.
            </summary>
            <param name="type">The partition type to represent as a string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionInfo">
            <summary>
            Provides access to partition records in a GUID partition table.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Attributes">
            <summary>
            Gets the attributes of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.BiosType">
            <summary>
            Always returns Zero.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.GuidType">
            <summary>
            Gets the type of the partition, as a GUID.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Identity">
            <summary>
            Gets the unique identity of this specific partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Name">
            <summary>
            Gets the name of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.TypeAsString">
            <summary>
            Gets the type of the partition as a string.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionInfo.Open">
            <summary>
            Opens a stream to access the content of the partition.
            </summary>
            <returns>The new stream.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionTable">
            <summary>
            Represents a GUID Partition Table.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the GuidPartitionTable class.
            </summary>
            <param name="disk">The disk containing the partition table.</param>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.#ctor(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the GuidPartitionTable class.
            </summary>
            <param name="disk">The stream containing the disk data.</param>
            <param name="diskGeometry">The geometry of the disk.</param>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.DiskGuid">
            <summary>
            Gets the unique GPT identifier for this disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.FirstUsableSector">
            <summary>
            Gets the first sector of the disk available to hold partitions.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.LastUsableSector">
            <summary>
            Gets the last sector of the disk available to hold partitions.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.Partitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(DiscUtils.VirtualDisk)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The stream containing the disk data.</param>
            <param name="diskGeometry">The geometry of the disk.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(DiscUtils.VirtualDisk,DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Creates a new partition table on a disk containing a single partition.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <param name="type">The partition type for the single partition.</param>
            <returns>An object to access the newly created partition table.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new primary partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the new partition.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in bytes).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in bytes).</param>
            <returns>The index of the new partition.</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is achieved by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(System.Int64,System.Int64,System.Guid,System.Int64,System.String)">
            <summary>
            Creates a new GUID partition on the disk.
            </summary>
            <param name="startSector">The first sector of the partition.</param>
            <param name="endSector">The last sector of the partition.</param>
            <param name="type">The partition type.</param>
            <param name="attributes">The partition attributes.</param>
            <param name="name">The name of the partition.</param>
            <returns>The index of the new partition.</returns>
            <remarks>No checking is performed on the parameters, the caller is
            responsible for ensuring that the partition does not overlap other partitions.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition.</param>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionTypes">
            <summary>
            Convenient access to well known GPT partition types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.EfiSystem">
            <summary>
            EFI system partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.BiosBoot">
            <summary>
            BIOS boot partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.MicrosoftReserved">
            <summary>
            Microsoft reserved partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsBasicData">
            <summary>
            Windows basic data partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.LinuxLvm">
            <summary>
            Linux LVM partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.LinuxSwap">
            <summary>
            Linux swap partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsLdmMetadata">
            <summary>
            Windows Logical Disk Manager metadata.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsLdmData">
            <summary>
            Windows Logical Disk Manager data.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTypes.Convert(DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Converts a well known partition type to a Guid.
            </summary>
            <param name="wellKnown">The value to convert.</param>
            <returns>The GUID value.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.PartitionInfo">
            <summary>
            Base class representing a disk partition.
            </summary>
            <remarks>The purpose of this class is to provide a minimal view of a partition,
            such that callers can access existing partitions without specific knowledge of
            the partitioning system.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.BiosType">
            <summary>
            Gets the type of the partition, in legacy BIOS form, when available.
            </summary>
            <remarks>Zero for GUID-style partitions.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.GuidType">
            <summary>
            Gets the type of the partition, as a GUID, when available.
            </summary>
            <remarks><see cref="T:System.Guid"/>.Empty for MBR-style partitions.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.SectorCount">
            <summary>
            Gets the length of the partition in sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.TypeAsString">
            <summary>
            Gets the partition type as a 'friendly' string.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.VolumeType">
            <summary>
            Gets the physical volume type for this type of partition.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionInfo.Open">
            <summary>
            Opens a stream that accesses the partition's contents.
            </summary>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionInfo.ToString">
            <summary>
            Gets a summary of the partition information as 'first - last (type)'.
            </summary>
            <returns>A string representation of the partition information.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.PartitionTable">
            <summary>
            Base class for classes which represent a disk partitioning scheme.
            </summary>
            <remarks>After modifying the table, by creating or deleting a partition assume that any
            previously stored partition indexes of higher value are no longer valid.  Re-enumerate
            the partitions to discover the next index-to-partition mapping.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Count">
            <summary>
            Gets the number of User partitions on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.DiskGuid">
            <summary>
            Gets the GUID that uniquely identifies this disk, if supported (else returns <c>null</c>).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Item(System.Int32)">
            <summary>
            Gets information about a particular User partition.
            </summary>
            <param name="index">The index of the partition.</param>
            <returns>Information about the partition.</returns>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Partitions">
            <summary>
            Gets the list of partitions that contain user data (i.e. non-system / empty).
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.IsPartitioned(System.IO.Stream)">
            <summary>
            Determines if a disk is partitioned with a known partitioning scheme.
            </summary>
            <param name="content">The content of the disk to check.</param>
            <returns><c>true</c> if the disk is partitioned, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.IsPartitioned(DiscUtils.VirtualDisk)">
            <summary>
            Determines if a disk is partitioned with a known partitioning scheme.
            </summary>
            <param name="disk">The disk to check.</param>
            <returns><c>true</c> if the disk is partitioned, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.GetPartitionTables(DiscUtils.VirtualDisk)">
            <summary>
            Gets all of the partition tables found on a disk.
            </summary>
            <param name="disk">The disk to inspect.</param>
            <returns>It is rare for a disk to have multiple partition tables, but theoretically
            possible.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.GetPartitionTables(System.IO.Stream)">
            <summary>
            Gets all of the partition tables found on a disk.
            </summary>
            <param name="contentStream">The content of the disk to inspect.</param>
            <returns>It is rare for a disk to have multiple partition tables, but theoretically
            possible.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <returns>The index of the new partition.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in byte).</param>
            <returns>The index of the partition.</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes).</param>
            <param name="type">The partition type.</param>
            <param name="active">Whether the partition is active (bootable).</param>
            <param name="alignment">The alignment (in byte).</param>
            <returns>The index of the new partition.</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is achieved by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition.</param>
        </member>
        <member name="T:DiscUtils.Partitions.WellKnownPartitionType">
            <summary>
            Enumeration of partition-table technology neutral partition types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.WindowsFat">
            <summary>
            Windows FAT-based partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.WindowsNtfs">
            <summary>
            Windows NTFS-based partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.Linux">
            <summary>
            Linux native file system.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.LinuxSwap">
            <summary>
            Linux swap.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.LinuxLvm">
            <summary>
            Linux Logical Volume Manager (LVM).
            </summary>
        </member>
        <member name="T:DiscUtils.PhysicalVolumeInfo">
            <summary>
            Information about a physical disk volume, which may be a partition or an entire disk.
            </summary>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.#ctor(System.String,DiscUtils.VirtualDisk,DiscUtils.Partitions.PartitionInfo)">
            <summary>
            Initializes a new instance of the PhysicalVolumeInfo class.
            </summary>
            <param name="diskId">The containing disk's identity.</param>
            <param name="disk">The disk containing the partition.</param>
            <param name="partitionInfo">Information about the partition.</param>
            <remarks>Use this constructor to represent a (BIOS or GPT) partition.</remarks>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.#ctor(System.String,DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the PhysicalVolumeInfo class.
            </summary>
            <param name="diskId">The identity of the disk.</param>
            <param name="disk">The disk itself.</param>
            <remarks>Use this constructor to represent an entire disk as a single volume.</remarks>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.DiskIdentity">
            <summary>
            Gets the unique identity of the disk containing the volume, if known.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.DiskSignature">
            <summary>
            Gets the signature of the disk containing the volume (only valid for partition-type volumes).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Identity">
            <summary>
            Gets the stable identity for this physical volume.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Length">
            <summary>
            Gets the size of the volume, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Partition">
            <summary>
            Gets the underlying partition (if any).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PartitionIdentity">
            <summary>
            Gets the unique identity of the physical partition, if known.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be null).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.VolumeType">
            <summary>
            Gets the type of the volume.
            </summary>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.Open">
            <summary>
            Opens the volume, providing access to its contents.
            </summary>
            <returns>A stream that can be used to access the volume.</returns>
        </member>
        <member name="T:DiscUtils.PhysicalVolumeType">
            <summary>
            Enumeration of possible types of physical volume.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.None">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.EntireDisk">
            <summary>
            Physical volume encompasses the entire disk.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.BiosPartition">
            <summary>
            Physical volume is defined by a BIOS-style partition table.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.GptPartition">
            <summary>
            Physical volume is defined by a GUID partition table.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.ApplePartition">
            <summary>
            Physical volume is defined by an Apple partition map.
            </summary>
        </member>
        <member name="T:DiscUtils.Raw.Disk">
            <summary>
            Represents a raw disk image.
            </summary>
            <remarks>This disk format is simply an uncompressed capture of all blocks on a disk.</remarks>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
            <param name="geometry">The emulated geometry of the disk.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="path">The path to the disk image.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="path">The path to the disk image.</param>
            <param name="access">The access requested to the disk.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(DiscUtils.Raw.DiskImageFile)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="file">The contents of the disk.</param>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Content">
            <summary>
            Gets the content of the disk as a stream.
            </summary>
            <remarks>Note the returned stream is not guaranteed to be at any particular position.  The actual position
            will depend on the last partition table/file system activity, since all access to the disk contents pass
            through a single stream instance.  Set the stream position before accessing the stream.</remarks>
        </member>
        <member name="P:DiscUtils.Raw.Disk.DiskClass">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.DiskTypeInfo">
            <summary>
            Gets information about the type of disk.
            </summary>
            <remarks>This property provides access to meta-data about the disk format, for example whether the
            BIOS geometry is preserved in the disk file.</remarks>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Layers">
            <summary>
            Gets the layers that make up the disk.
            </summary>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Streams.Ownership,System.Int64)">
            <summary>
            Initializes a stream as an unformatted disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk.</param>
            <returns>An object that accesses the stream as a disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Streams.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as an unformatted disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk.</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default.</param>
            <returns>An object that accesses the stream as a disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.FloppyDiskType)">
            <summary>
            Initializes a stream as an unformatted floppy disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="type">The type of floppy disk image to create.</param>
            <returns>An object that accesses the stream as a disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.CreateDifferencingDisk(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Create a new differencing disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on.</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.CreateDifferencingDisk(System.String)">
            <summary>
            Create a new differencing disk.
            </summary>
            <param name="path">The path (or URI) for the disk to create.</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="T:DiscUtils.Raw.DiskImageFile">
            <summary>
            Represents a single raw disk image file.
            </summary>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret.</param>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret.</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
            <param name="geometry">The emulated geometry of the disk.</param>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.DiskType">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.Geometry">
            <summary>
            Gets the geometry of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.IsSparse">
            <summary>
            Gets a value indicating if the layer only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.NeedsParent">
            <summary>
            Gets a value indicating whether the file is a differencing disk.
            </summary>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Initialize(System.IO.Stream,DiscUtils.Streams.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a raw disk image.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk.</param>
            <param name="geometry">The geometry of the new disk.</param>
            <returns>An object that accesses the stream as a raw disk image.</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Initialize(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.FloppyDiskType)">
            <summary>
            Initializes a stream as an unformatted floppy disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="type">The type of floppy disk image to create.</param>
            <returns>An object that accesses the stream as a disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.OpenContent(DiscUtils.Streams.SparseStream,DiscUtils.Streams.Ownership)">
            <summary>
            Gets the content of this layer.
            </summary>
            <param name="parent">The parent stream (if any).</param>
            <param name="ownsParent">Controls ownership of the parent stream.</param>
            <returns>The content as a stream.</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.GetParentLocations">
            <summary>
            Gets the possible locations of the parent file (if any).
            </summary>
            <returns>Array of strings, empty if no parent.</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.DetectGeometry(System.IO.Stream)">
            <summary>
            Calculates the best guess geometry of a disk.
            </summary>
            <param name="disk">The disk to detect the geometry of.</param>
            <returns>The geometry of the disk.</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.DetectDiskType(System.Int64)">
            <summary>
            Calculates the best guess disk type (i.e. floppy or hard disk).
            </summary>
            <param name="capacity">The capacity of the disk.</param>
            <returns>The disk type.</returns>
        </member>
        <member name="T:DiscUtils.ReadOnlyDiscFileSystem">
            <summary>
            Base class for file systems that are by their nature read-only, causes NotSupportedException to be thrown
            from all methods that are always invalid.
            </summary>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.#ctor">
            <summary>
            Initializes a new instance of the ReadOnlyDiscFileSystem class.
            </summary>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the ReadOnlyDiscFileSystem class.
            </summary>
            <param name="defaultOptions">The options instance to use for this file system instance.</param>
        </member>
        <member name="P:DiscUtils.ReadOnlyDiscFileSystem.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file - not supported on read-only file systems.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory - not supported on read-only file systems.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file - not supported on read-only file systems.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to allow an existing file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.ReadOnlyDiscFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="T:DiscUtils.ReparsePoint">
            <summary>
            Represents a Reparse Point, which can be associated with a file or directory.
            </summary>
        </member>
        <member name="M:DiscUtils.ReparsePoint.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the ReparsePoint class.
            </summary>
            <param name="tag">The defined reparse point tag.</param>
            <param name="content">The reparse point's content.</param>
        </member>
        <member name="P:DiscUtils.ReparsePoint.Content">
            <summary>
            Gets or sets the reparse point's content.
            </summary>
        </member>
        <member name="P:DiscUtils.ReparsePoint.Tag">
            <summary>
            Gets or sets the defined reparse point tag.
            </summary>
        </member>
        <member name="T:DiscUtils.ReportLevels">
            <summary>
            Flags for the amount of detail to include in a report.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.None">
            <summary>
            Report no information.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Information">
            <summary>
            Report informational level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Warnings">
            <summary>
            Report warning level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Errors">
            <summary>
            Report error level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.All">
            <summary>
            Report all items.
            </summary>
        </member>
        <member name="T:DiscUtils.Setup.FileOpenEventArgs">
            <summary>
            Event arguments for opening a file
            </summary>
        </member>
        <member name="P:DiscUtils.Setup.FileOpenEventArgs.FileName">
            <summary>
            Gets or sets the filename to open
            </summary>
        </member>
        <member name="P:DiscUtils.Setup.FileOpenEventArgs.FileMode">
            <summary>
            Gets or sets the <see cref="P:DiscUtils.Setup.FileOpenEventArgs.FileMode"/>
            </summary>
        </member>
        <member name="P:DiscUtils.Setup.FileOpenEventArgs.FileAccess">
            <summary>
            Gets or sets the <see cref="P:DiscUtils.Setup.FileOpenEventArgs.FileAccess"/>
            </summary>
        </member>
        <member name="P:DiscUtils.Setup.FileOpenEventArgs.FileShare">
            <summary>
            Gets or sets the <see cref="P:DiscUtils.Setup.FileOpenEventArgs.FileShare"/>
            </summary>
        </member>
        <member name="P:DiscUtils.Setup.FileOpenEventArgs.Result">
            <summary>
            The resulting stream.
            </summary>
            <remarks>
            If this is set to a non null value, this stream is used instead of opening the supplied <see cref="P:DiscUtils.Setup.FileOpenEventArgs.FileName"/>
            </remarks>
        </member>
        <member name="M:DiscUtils.Setup.FileOpenEventArgs.GetFileStream">
            <summary>
            returns the result from the builtin FileLocator
            </summary>
            <returns></returns>
        </member>
        <member name="T:DiscUtils.Setup.SetupHelper">
            <summary>
            Helps setup new DiscUtils dependencies, when loaded into target programs
            </summary>
        </member>
        <member name="M:DiscUtils.Setup.SetupHelper.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the types provided by an assembly to all relevant DiscUtils managers
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="E:DiscUtils.Setup.SetupHelper.OpeningFile">
            <summary>
            Allows intercepting any file open operation
            </summary>
            <remarks>
            Can be used to wrap the opened file for special use cases,
            modify the parameters for opening files, validate file names 
            and many more.
            </remarks>
        </member>
        <member name="T:DiscUtils.TimeConverter">
            <summary>
            Converts a time to/from UTC.
            </summary>
            <param name="time">The time to convert.</param>
            <param name="toUtc"><c>true</c> to convert FAT time to UTC, <c>false</c> to convert UTC to FAT time.</param>
            <returns>The converted time.</returns>
        </member>
        <member name="T:DiscUtils.UnixFilePermissions">
            <summary>
            Standard Unix-style file system permissions.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OthersExecute">
            <summary>
            Any user execute permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OthersWrite">
            <summary>
            Any user write permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OthersRead">
            <summary>
            Any user read permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OthersAll">
            <summary>
            Any user all permissions.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.GroupExecute">
            <summary>
            Group execute permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.GroupWrite">
            <summary>
            Group write permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.GroupRead">
            <summary>
            Group read permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.GroupAll">
            <summary>
            Group all permissions.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OwnerExecute">
            <summary>
            Owner execute permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OwnerWrite">
            <summary>
            Owner write permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OwnerRead">
            <summary>
            Owner read permission.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.OwnerAll">
            <summary>
            Owner all permissions.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.Sticky">
            <summary>
            Sticky bit (meaning ill-defined).
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.SetGroupId">
            <summary>
            Set GUID on execute.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFilePermissions.SetUserId">
            <summary>
            Set UID on execute.
            </summary>
        </member>
        <member name="T:DiscUtils.UnixFileSystemInfo">
            <summary>
            Information about a file or directory common to most Unix systems.
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.DeviceId">
            <summary>
            Gets or sets the device id of the referenced device (for character and block devices).
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.FileType">
            <summary>
            Gets or sets the file's type.
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.GroupId">
            <summary>
            Gets or sets the group that owns this file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.Inode">
            <summary>
            Gets or sets the file's serial number (unique within file system).
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.LinkCount">
            <summary>
            Gets or sets the number of hard links to this file.
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.Permissions">
            <summary>
            Gets or sets the file permissions (aka flags) for this file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.UnixFileSystemInfo.UserId">
            <summary>
            Gets or sets the user that owns this file or directory.
            </summary>
        </member>
        <member name="T:DiscUtils.UnixFileType">
            <summary>
            Standard Unix-style file type.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Fifo">
            <summary>
            A FIFO / Named Pipe.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Character">
            <summary>
            A character device.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Directory">
            <summary>
            A normal directory.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Block">
            <summary>
            A block device.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Regular">
            <summary>
            A regular file.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Link">
            <summary>
            A soft link.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Socket">
            <summary>
            A unix socket.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsDirectory`2">
            <summary>
            Interface implemented by classes representing a directory.
            </summary>
            <typeparam name="TDirEntry">Concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">Concrete type representing files.</typeparam>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsDirectory`2.AllEntries">
            <summary>
            Gets all of the directory entries.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsDirectory`2.Self">
            <summary>
            Gets a self-reference, if available.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsDirectory`2.GetEntryByName(System.String)">
            <summary>
            Gets a specific directory entry, by name.
            </summary>
            <param name="name">The name of the directory entry.</param>
            <returns>The directory entry, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsDirectory`2.CreateNewFile(System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="name">The name of the file (relative to this directory).</param>
            <returns>The newly created file.</returns>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsFile">
            <summary>
            Interface implemented by a class representing a file.
            </summary>
            <remarks>
            File system implementations should have a class that implements this
            interface.  If the file system implementation is read-only, it is
            acceptable to throw <c>NotImplementedException</c> from setters.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.CreationTimeUtc">
            <summary>
            Gets or sets the last creation time in UTC.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileAttributes">
            <summary>
            Gets or sets the file's attributes.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileContent">
            <summary>
            Gets a buffer to access the file's contents.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileLength">
            <summary>
            Gets the length of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.LastAccessTimeUtc">
            <summary>
            Gets or sets the last access time in UTC.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.LastWriteTimeUtc">
            <summary>
            Gets or sets the last write time in UTC.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsFileWithStreams">
            <summary>
            Interface implemented by classes representing files, in file systems that support multi-stream files.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsFileWithStreams.CreateStream(System.String)">
            <summary>
            Creates a new stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>An object representing the stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsFileWithStreams.OpenExistingStream(System.String)">
            <summary>
            Opens an existing stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>An object representing the stream.</returns>
            <remarks>The implementation must not implicitly create the stream if it doesn't already
            exist.</remarks>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsSymlink`2">
            <summary>
            Interface implemented by classes representing a directory.
            </summary>
            <typeparam name="TDirEntry">Concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">Concrete type representing files.</typeparam>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsSymlink`2.TargetPath">
            <summary>
            Gets the target path for this symlink.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsContext">
            <summary>
            Base class for a context object that holds global state for file system implementations.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsDirEntry">
            <summary>
            Base class for directory entries in a file system.
            </summary>
            <remarks>
            File system implementations should have a class that derives from
            this abstract class.  If the file system implementation is read-only,
            it is acceptable to throw <c>NotImplementedException</c> from methods
            that attempt to modify the file system.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.CreationTimeUtc">
            <summary>
            Gets the creation time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.FileAttributes">
            <summary>
            Gets the file attributes from the directory entry.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsFileAttributes</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.FileName">
            <summary>
            Gets the name of this directory entry.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.HasVfsFileAttributes">
            <summary>
            Gets a value indicating whether this directory entry contains file attribute information.
            </summary>
            <remarks>
            <para>Typically either always returns <c>true</c> or <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.HasVfsTimeInfo">
            <summary>
            Gets a value indicating whether this directory entry contains time information.
            </summary>
            <remarks>
            <para>Typically either always returns <c>true</c> or <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.IsDirectory">
            <summary>
            Gets a value indicating whether this directory entry represents a directory (rather than a file).
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.IsSymlink">
            <summary>
            Gets a value indicating whether this directory entry represents a symlink (rather than a file or directory).
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.LastAccessTimeUtc">
            <summary>
            Gets the last access time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.LastWriteTimeUtc">
            <summary>
            Gets the last write time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.SearchName">
            <summary>
            Gets a version of FileName that can be used in wildcard matches.
            </summary>
            <remarks>
            The returned name, must have an extension separator '.', and not have any optional version
            information found in some files.  The returned name is matched against a wildcard patterns
            such as "*.*".
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.UniqueCacheId">
            <summary>
            Gets a unique id for the file or directory represented by this directory entry.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystem`4">
            <summary>
            Base class for VFS file systems.
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">The concrete type representing files.</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories.</typeparam>
            <typeparam name="TContext">The concrete type holding global state.</typeparam>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the VfsFileSystem class.
            </summary>
            <param name="defaultOptions">The default file system options.</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.Context">
            <summary>
            Gets or sets the global shared state.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.RootDirectory">
            <summary>
            Gets or sets the object representing the root directory.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file - not supported on read-only file systems.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.CreateDirectory(System.String)">
            <summary>
            Creates a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DeleteFile(System.String)">
            <summary>
            Deletes a file - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Overwrite any existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.ForAllDirEntries(System.String,DiscUtils.Vfs.VfsFileSystem{`0,`1,`2,`3}.DirEntryHandler)">
            <summary>
            Gets all directory entries in the specified directory and sub-directories.
            </summary>
            <param name="path">The path to inspect.</param>
            <param name="handler">Delegate invoked for each directory entry.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFile(System.String)">
            <summary>
            Gets the file object for a given path.
            </summary>
            <param name="path">The path to query.</param>
            <returns>The file object corresponding to the path.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.ConvertDirEntryToFile(`0)">
            <summary>
            Converts a directory entry to an object representing a file.
            </summary>
            <param name="dirEntry">The directory entry to convert.</param>
            <returns>The corresponding file object.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.FormatFileName(System.String)">
            <summary>
            Converts an internal directory entry name into an external one.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The external name.</returns>
            <remarks>
            This method is called on a single path element (i.e. name contains no path
            separators).
            </remarks>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystem`4.DirEntryHandler">
            <summary>
            Delegate for processing directory entries.
            </summary>
            <param name="path">Full path to the directory entry.</param>
            <param name="dirEntry">The directory entry itself.</param>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFacade">
            <summary>
            Base class for the public facade on a file system.
            </summary>
            <remarks>
            The derived class can extend the functionality available from a file system
            beyond that defined by DiscFileSystem.
            </remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.#ctor(DiscUtils.DiscFileSystem)">
            <summary>
            Initializes a new instance of the VfsFileSystemFacade class.
            </summary>
            <param name="toWrap">The actual file system instance.</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.FriendlyName">
            <summary>
            Gets a friendly name for the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.Options">
            <summary>
            Gets the file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Overwrite any existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file or directory exists.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last access time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The last write time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The representing object.</returns>
            <remarks>The file does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path.</param>
            <returns>The representing object.</returns>
            <remarks>The directory does not need to exist.</remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path.</param>
            <returns>The representing object.</returns>
            <remarks>The file system object does not need to exist.</remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.Size">
            <summary>
            Size of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.UsedSpace">
            <summary>
            Used space of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.AvailableSpace">
            <summary>
            Available space of the Filesystem in bytes
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetRealFileSystem``4">
            <summary>
            Provides access to the actual file system implementation.
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">The concrete type representing files.</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories.</typeparam>
            <typeparam name="TContext">The concrete type holding global state.</typeparam>
            <returns>The actual file system instance.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetRealFileSystem``1">
            <summary>
            Provides access to the actual file system implementation.
            </summary>
            <typeparam name="T">The concrete type of the actual file system.</typeparam>
            <returns>The actual file system instance.</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFactory">
            <summary>
            Base class for logic to detect file systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(System.IO.Stream)">
            <summary>
            Detects if a stream contains any known file systems.
            </summary>
            <param name="stream">The stream to inspect.</param>
            <returns>A list of file systems (may be empty).</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(DiscUtils.VolumeInfo)">
            <summary>
            Detects if a volume contains any known file systems.
            </summary>
            <param name="volume">The volume to inspect.</param>
            <returns>A list of file systems (may be empty).</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(System.IO.Stream,DiscUtils.VolumeInfo)">
            <summary>
            The logic for detecting file systems.
            </summary>
            <param name="stream">The stream to inspect.</param>
            <param name="volumeInfo">Optionally, information about the volume.</param>
            <returns>A list of file systems detected (may be empty).</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFactoryAttribute">
            <summary>
            Attribute identifying file system factory classes.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemInfo">
            <summary>
            Class holding information about a file system.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.#ctor(System.String,System.String,DiscUtils.Vfs.VfsFileSystemOpener)">
            <summary>
            Initializes a new instance of the VfsFileSystemInfo class.
            </summary>
            <param name="name">The name of the file system.</param>
            <param name="description">A one-line description of the file system.</param>
            <param name="openDelegate">A delegate that can open streams as the indicated file system.</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemInfo.Description">
            <summary>
            Gets a one-line description of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemInfo.Name">
            <summary>
            Gets the name of the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.Open(DiscUtils.VolumeInfo,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access.</param>
            <param name="parameters">Parameters for the file system.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.Open(System.IO.Stream,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access.</param>
            <param name="parameters">Parameters for the file system.</param>
            <returns>A file system instance.</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemOpener">
            <summary>
            Delegate for instantiating a file system.
            </summary>
            <param name="stream">The stream containing the file system.</param>
            <param name="volumeInfo">Optional, information about the volume the file system is on.</param>
            <param name="parameters">Parameters for the file system.</param>
            <returns>A file system implementation.</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsReadOnlyFileSystem`4">
            <summary>
            Base class for read-only file system implementations.
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">The concrete type representing files.</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories.</typeparam>
            <typeparam name="TContext">The concrete type holding global state.</typeparam>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the VfsReadOnlyFileSystem class.
            </summary>
            <param name="defaultOptions">The default file system options.</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file - not supported on read-only file systems.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CreateDirectory(System.String)">
            <summary>
            Creates a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the new directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.DeleteFile(System.String)">
            <summary>
            Deletes a file - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory - not supported on read-only file systems.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file - not supported on read-only file systems.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to allow an existing file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="T:DiscUtils.VirtualDisk">
            <summary>
            Base class representing virtual hard disks.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Finalize">
            <summary>
            Finalizes an instance of the VirtualDisk class.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.SupportedDiskFormats">
            <summary>
            Gets the set of disk formats supported as an array of file extensions.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.SupportedDiskTypes">
            <summary>
            Gets the set of disk types supported, as an array of identifiers.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.BiosGeometry">
            <summary>
            Gets the geometry of the disk as it is anticipated a hypervisor BIOS will represent it.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.DiskClass">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.BlockSize">
            <summary>
            Gets the size of the disk's logical blocks (aka sector size), in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.SectorSize">
            <summary>
            Gets the logical sector size of the disk, in bytes.
            </summary>
            <remarks>This is an alias for the <c>BlockSize</c> property.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Content">
            <summary>
            Gets the content of the disk as a stream.
            </summary>
            <remarks>Note the returned stream is not guaranteed to be at any particular position.  The actual position
            will depend on the last partition table/file system activity, since all access to the disk contents pass
            through a single stream instance.  Set the stream position before accessing the stream.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Layers">
            <summary>
            Gets the layers that make up the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Signature">
            <summary>
            Gets or sets the Windows disk signature of the disk, which uniquely identifies the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.IsPartitioned">
            <summary>
            Gets a value indicating whether the disk appears to have a valid partition table.
            </summary>
            <remarks>There is no reliable way to determine whether a disk has a valid partition
            table.  The 'guess' consists of checking for basic indicators and looking for obviously
            invalid data, such as overlapping partitions.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Partitions">
            <summary>
            Gets the object that interprets the partition structure.
            </summary>
            <remarks>It is theoretically possible for a disk to contain two independent partition structures - a
            BIOS/GPT one and an Apple one, for example.  This method will return in order of preference,
            a GUID partition table, a BIOS partition table, then in undefined preference one of any other partition
            tables found.  See PartitionTable.GetPartitionTables to gain access to all the discovered partition
            tables on a disk.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Parameters">
            <summary>
            Gets the parameters of the disk.
            </summary>
            <remarks>Most of the parameters are also available individually, such as DiskType and Capacity.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.DiskTypeInfo">
            <summary>
            Gets information about the type of disk.
            </summary>
            <remarks>This property provides access to meta-data about the disk format, for example whether the
            BIOS geometry is preserved in the disk file.</remarks>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)">
            <summary>
            Gets the set of supported variants of a type of virtual disk.
            </summary>
            <param name="type">A type, as returned by <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>.</param>
            <returns>A collection of identifiers, or empty if there is no variant concept for this type of disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetDiskType(System.String,System.String)">
            <summary>
            Gets information about disk type.
            </summary>
            <param name="type">The disk type, as returned by <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>.</param>
            <param name="variant">The variant of the disk type.</param>
            <returns>Information about the disk type.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(DiscUtils.DiscFileSystem,System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on.</param>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>).</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>).</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <param name="capacity">The capacity of the new disk.</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD).</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>).</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>).</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <param name="capacity">The capacity of the new disk.</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD).</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>).</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>).</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <param name="capacity">The capacity of the new disk.</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="user">The user identity to use when accessing the <c>path</c> (or null).</param>
            <param name="password">The password to use when accessing the <c>path</c> (or null).</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD).</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,DiscUtils.VirtualDiskParameters,System.String,System.String)">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>).</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>).</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <param name="diskParameters">Parameters controlling the capacity, geometry, etc of the new disk.</param>
            <param name="user">The user identity to use when accessing the <c>path</c> (or null).</param>
            <param name="password">The password to use when accessing the <c>path</c> (or null).</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.IO.FileAccess)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI.</param>
            <param name="access">The desired access to the disk.</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.IO.FileAccess,System.String,System.String)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI.</param>
            <param name="access">The desired access to the disk.</param>
            <param name="user">The user name to use for authentication (if necessary).</param>
            <param name="password">The password to use for authentication (if necessary).</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.String,System.IO.FileAccess,System.String,System.String)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI.</param>
            <param name="forceType">Force the detected disk type (<c>null</c> to detect).</param>
            <param name="access">The desired access to the disk.</param>
            <param name="user">The user name to use for authentication (if necessary).</param>
            <param name="password">The password to use for authentication (if necessary).</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format.</returns>
            <remarks>
            The detected disk type can be forced by specifying a known disk type: 
            RAW, VHD, VMDK, etc.
            </remarks>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(DiscUtils.DiscFileSystem,System.String,System.IO.FileAccess)">
            <summary>
            Opens an existing virtual disk, possibly from within an existing disk.
            </summary>
            <param name="fs">The file system to open the disk on.</param>
            <param name="path">The path of the virtual disk to open.</param>
            <param name="access">The desired access to the disk.</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetMasterBootRecord">
            <summary>
            Reads the first sector of the disk, known as the Master Boot Record.
            </summary>
            <returns>The MBR as a byte array.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.SetMasterBootRecord(System.Byte[])">
            <summary>
            Overwrites the first sector of the disk, known as the Master Boot Record.
            </summary>
            <param name="data">The master boot record, must be 512 bytes in length.</param>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDifferencingDisk(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Create a new differencing disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on.</param>
            <param name="path">The path (or URI) for the disk to create.</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDifferencingDisk(System.String)">
            <summary>
            Create a new differencing disk.
            </summary>
            <param name="path">The path (or URI) for the disk to create.</param>
            <returns>The newly created disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskClass">
            <summary>
            Enumeration of different classes of disk.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.None">
            <summary>
            Unknown (or unspecified) type.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.HardDisk">
            <summary>
            Hard disk.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.OpticalDisk">
            <summary>
            Optical disk, such as CD or DVD.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.FloppyDisk">
            <summary>
            Floppy disk.
            </summary>
        </member>
        <member name="T:DiscUtils.VirtualDiskExtent">
            <summary>
            Base class represented a stored extent of a virtual disk.
            </summary>
            <remarks>
            Some file formats can divide a logical disk layer into multiple extents, stored in
            different files.  This class represents those extents.  Normally, all virtual disks
            have at least one extent.
            </remarks>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.Capacity">
            <summary>
            Gets the capacity of the extent (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.IsSparse">
            <summary>
            Gets a value indicating whether the extent only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.StoredSize">
            <summary>
            Gets the size of the extent (in bytes) on underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.OpenContent(DiscUtils.Streams.SparseStream,DiscUtils.Streams.Ownership)">
            <summary>
            Gets the content of this extent.
            </summary>
            <param name="parent">The parent stream (if any).</param>
            <param name="ownsParent">Controls ownership of the parent stream.</param>
            <returns>The content as a stream.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskLayer">
            <summary>
            Represents the base layer, or a differencing layer of a VirtualDisk.
            </summary>
            <remarks>
            <para>VirtualDisks are composed of one or more layers - a base layer
            which represents the entire disk (even if not all bytes are actually stored),
            and a number of differencing layers that store the disk sectors that are
            logically different to the base layer.</para>
            <para>Disk Layers may not store all sectors.  Any sectors that are not stored
            are logically zero's (for base layers), or holes through to the layer underneath
            (all other layers).</para>
            </remarks>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Extents">
            <summary>
            Gets and sets the logical extents that make up this layer.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.FullPath">
            <summary>
            Gets the full path to this disk layer, or empty string.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Geometry">
            <summary>
            Gets the geometry of the virtual disk layer.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.IsSparse">
            <summary>
            Gets a value indicating whether the layer only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.NeedsParent">
            <summary>
            Gets a value indicating whether this is a differential disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.RelativeFileLocator">
            <summary>
            Gets a <c>FileLocator</c> that can resolve relative paths, or <c>null</c>.
            </summary>
            <remarks>
            Typically used to locate parent disks.
            </remarks>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Finalize">
            <summary>
            Finalizes an instance of the VirtualDiskLayer class.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.OpenContent(DiscUtils.Streams.SparseStream,DiscUtils.Streams.Ownership)">
            <summary>
            Gets the content of this layer.
            </summary>
            <param name="parent">The parent stream (if any).</param>
            <param name="ownsParent">Controls ownership of the parent stream.</param>
            <returns>The content as a stream.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.GetParentLocations">
            <summary>
            Gets the possible locations of the parent file (if any).
            </summary>
            <returns>Array of strings, empty if no parent.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskManager">
            <summary>
            Helps discover and use VirtualDiskFactory's
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskManager.SupportedDiskFormats">
            <summary>
            Gets the set of disk formats supported as an array of file extensions.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskManager.SupportedDiskTypes">
            <summary>
            Gets the set of disk types supported, as an array of identifiers.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskManager.RegisterVirtualDiskTypes(System.Reflection.Assembly)">
            <summary>
            Locates VirtualDiskFactory factories attributed with VirtualDiskFactoryAttribute, and types marked with VirtualDiskTransportAttribute, that are able to work with Virtual Disk types.
            </summary>
            <param name="assembly">An assembly to scan</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskParameters">
            <summary>
            Common parameters for virtual disks.
            </summary>
            <remarks>Not all attributes make sense for all kinds of disks, so some
            may be null.  Modifying instances of this class does not modify the
            disk itself.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.AdapterType">
            <summary>
            Gets or sets the type of disk adapter.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.BiosGeometry">
            <summary>
            Gets or sets the logical (aka BIOS) geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.Capacity">
            <summary>
            Gets or sets the disk capacity.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.DiskType">
            <summary>
            Gets or sets the type of disk (optical, hard disk, etc).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.ExtendedParameters">
            <summary>
            Gets a dictionary of extended parameters, that varies by disk type.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.Geometry">
            <summary>
            Gets or sets the physical (aka IDE) geometry of the disk.
            </summary>
        </member>
        <member name="T:DiscUtils.VirtualDiskTypeInfo">
            <summary>
            Information about a type of virtual disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.CalcGeometry">
            <summary>
            Gets or sets the algorithm for determining the geometry for a given disk capacity.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.CanBeHardDisk">
            <summary>
            Gets or sets a value indicating whether this disk type can represent hard disks.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.DeterministicGeometry">
            <summary>
            Gets or sets a value indicating whether this disk type requires a specific geometry for any given disk capacity.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.Name">
            <summary>
            Gets or sets the name of the virtual disk type.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.PreservesBiosGeometry">
            <summary>
            Gets or sets a value indicating whether this disk type persists the BIOS geometry.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.Variant">
            <summary>
            Gets or sets the variant of the virtual disk type.
            </summary>
        </member>
        <member name="T:DiscUtils.VolumeInfo">
            <summary>
            Base class that holds information about a disk volume.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.Length">
            <summary>
            Gets the size of the volume, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.Identity">
            <summary>
            Gets the stable volume identity.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.VolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be null).
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="M:DiscUtils.VolumeInfo.Open">
            <summary>
            Opens the volume, providing access to it's contents.
            </summary>
            <returns>Stream that can access the volume's contents.</returns>
        </member>
        <member name="T:DiscUtils.VolumeManager">
            <summary>
            VolumeManager interprets partitions and other on-disk structures (possibly combining multiple disks).
            </summary>
            <remarks>
            <para>Although file systems commonly are placed directly within partitions on a disk, in some
            cases a logical volume manager / logical disk manager may be used, to combine disk regions in multiple
            ways for data redundancy or other purposes.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
            <param name="initialDisk">The initial disk to add.</param>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
            <param name="initialDiskContent">Content of the initial disk to add.</param>
        </member>
        <member name="M:DiscUtils.VolumeManager.RegisterLogicalVolumeFactory(System.Reflection.Assembly)">
            <summary>
            Register new LogicalVolumeFactories detected in an assembly
            </summary>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes(System.IO.Stream)">
            <summary>
            Gets the physical volumes held on a disk.
            </summary>
            <param name="diskContent">The contents of the disk to inspect.</param>
            <returns>An array of volumes.</returns>
            <remarks>
            <para>By preference, use the form of this method that takes a disk parameter.</para>
            <para>If the disk isn't partitioned, this method returns the entire disk contents
            as a single volume.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes(DiscUtils.VirtualDisk)">
            <summary>
            Gets the physical volumes held on a disk.
            </summary>
            <param name="disk">The disk to inspect.</param>
            <returns>An array of volumes.</returns>
            <remarks>If the disk isn't partitioned, this method returns the entire disk contents
            as a single volume.</remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.AddDisk(DiscUtils.VirtualDisk)">
            <summary>
            Adds a disk to the volume manager.
            </summary>
            <param name="disk">The disk to add.</param>
            <returns>The GUID the volume manager will use to identify the disk.</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.AddDisk(System.IO.Stream)">
            <summary>
            Adds a disk to the volume manager.
            </summary>
            <param name="content">The contents of the disk to add.</param>
            <returns>The GUID the volume manager will use to identify the disk.</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes">
            <summary>
            Gets the physical volumes from all disks added to this volume manager.
            </summary>
            <returns>An array of physical volumes.</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetLogicalVolumes">
            <summary>
            Gets the logical volumes from all disks added to this volume manager.
            </summary>
            <returns>An array of logical volumes.</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetVolume(System.String)">
            <summary>
            Gets a particular volume, based on it's identity.
            </summary>
            <param name="identity">The volume's identity.</param>
            <returns>The volume information for the volume, or returns <c>null</c>.</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.Scan">
            <summary>
            Scans all of the disks for their physical and logical volumes.
            </summary>
        </member>
        <member name="T:DiscUtils.WindowsFileInformation">
            <summary>
            Common information for Windows files.
            </summary>
        </member>
        <member name="P:DiscUtils.WindowsFileInformation.ChangeTime">
            <summary>
            Gets or sets the last time the file was changed.
            </summary>
        </member>
        <member name="P:DiscUtils.WindowsFileInformation.CreationTime">
            <summary>
            Gets or sets the creation time of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.WindowsFileInformation.FileAttributes">
            <summary>
            Gets or sets the file attributes.
            </summary>
        </member>
        <member name="P:DiscUtils.WindowsFileInformation.LastAccessTime">
            <summary>
            Gets or sets the last access time of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.WindowsFileInformation.LastWriteTime">
            <summary>
            Gets or sets the modification time of the file.
            </summary>
        </member>
        <member name="T:System.DateTimeOffsetExtensions">
            <summary>
            DateTimeOffset extension methods.
            </summary>
        </member>
        <member name="F:System.DateTimeOffsetExtensions.UnixEpoch">
            <summary>
            The Epoch common to most (all?) Unix systems.
            </summary>
        </member>
        <member name="M:System.DateTimeOffsetExtensions.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts the current Unix time to a DateTimeOffset.
            </summary>
            <param name="seconds">Seconds since UnixEpoch.</param>
            <returns>DateTimeOffset.</returns>
        </member>
        <member name="M:System.DateTimeOffsetExtensions.ToUnixTimeSeconds(System.DateTimeOffset)">
            <summary>
            Converts the current DateTimeOffset to Unix time.
            </summary>
            <param name="dateTimeOffset">DateTimeOffset.</param>
            <returns>Seconds since UnixEpoch.</returns>
        </member>
    </members>
</doc>
